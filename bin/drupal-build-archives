#!/bin/bash

. /usr/share/server-scripts/lib/init
use_config_var "DRUPAL_PROJECTS_ROOT" "/usr/local/drupal"
use_config_var "DRUPAL_PROJECTS_TYPES" "features libraries modules profiles themes"
use_config_var "DRUPAL_PROJECTS_BUILD_ROOT" "$DRUPAL_PROJECTS_ROOT/build"

HELP_TEXT="
Simple replace of drupal update server for drush make.

Сборка tar.gz архивов всех наших модулей.

- Проходит по папкам DRUPAL_PROJECTS_TYPES в DRUPAL_PROJECTS_ROOT
- Каждую подпапку складывает в DRUPAL_PROJECTS_BUILD_ROOT/тип_модуля/имя_модуля/latest.tar.gz
- Определяет версию модуля и создает архив с конкретной версией. Версия берется из .info файла, для libraries - из файла version в корне библиотеки
- Профили дополнительно пытается собрать и положить в /usr/local/drupal/build/profiles/имя_модуля_packed/latest.tar.gz
"

if [ "$1" = "--help" ]; then
	echo "$HELP_TEXT"
	exit 1
fi


build_project_archive() {
	project_path="$1"
	project_name="${project_path##*/}"
	project_type="$(basename $(dirname "$project_path"))"
	project_version=$(get_project_version "$project_path")
	target_dir="$DRUPAL_PROJECTS_BUILD_ROOT/$project_type/$project_name"
	latest_path="$target_dir/latest.tar.gz"
	#echo "$project_type / $project_name $project_version - '$project_version.tar.gz'"
	if [ "$project_name" = ".git" ]; then
		return 0
	fi

	cd "$project_path"
	mkdir -p "$target_dir"
	tar -czf "$latest_path" *
	if [ -n "$project_version" ]; then
		cp "$latest_path" "$target_dir/$project_version.tar.gz"
	else
		#if [ "$project_type" != "libraries" ]; then
		echo >&2 "$project_type / $project_name has no version defined"
		#fi
	fi
}

get_project_version() {
	project_path="$1"
	version=$(find "$project_path" -maxdepth 1 -name "*.info" -exec grep -E '^\s?version ?= ?' {} \; | awk -F'= ' '{ print $2; }' | tr -d '"')
	if [ -n "$version" ] && [ $(echo "$version" | wc -l) = 1 ]; then
		echo "$version"
	elif [ -e "$project_path/version" ]; then
		cat "$project_path/version"
	fi
}

build_profile() {
	project_path="$1"
	project_name="${project_path##*/}"
	project_type="$(basename $(dirname "$project_path"))"
	#project_version=$(get_project_version "$project_path")
	project_build_dir="$DRUPAL_PROJECTS_BUILD_ROOT/tmp/$project_type/${project_name}_packed"
	project_makefile="$project_build_dir/${project_name}.make.yml"
	#target_dir="$DRUPAL_PROJECTS_BUILD_ROOT/$project_type/$project_name"
	#latest_path="$target_dir/latest.tar.gz"

	if [ -d "$project_build_dir" ]; then
		rm -rf "$project_build_dir"
	fi
	mkdir -p "$DRUPAL_PROJECTS_BUILD_ROOT/tmp/$project_type"

	cp -r "$project_path" "$project_build_dir"
	cd "$project_build_dir"
	if [ -f "$project_makefile" ]; then
		drush make "$project_makefile" --no-core --contrib-destination=. "$project_build_dir"
		build_project_archive "$project_build_dir"
	fi
	rm -rf "$project_build_dir"
}

main() {
	for type in $DRUPAL_PROJECTS_TYPES; do
		type_path="$DRUPAL_PROJECTS_ROOT/$type"
		if [ ! -d "$type_path" ]; then
			break
		fi
		for project_path in $(find $type_path -mindepth 1 -maxdepth 1 -type d 2>/dev/null); do
			build_project_archive "$project_path"
		done
	done
}

main "$@"

