#!/bin/bash
# v0.2

SCRIPT_HELP="
Backup all databases.

Usage:
{0} backup - backup databases
{0} send - send backups to remote
{0} clean - clean old backups
"

. /usr/share/server-scripts/lib/init
use_config_var "DB_BACKUPS_ROOT"
use_config_var "DB_BACKUPS_LOG"
use_config_var "DB_BACKUPS_SEND_HOUR"
use_config_var "DB_BACKUPS_REMOTE_USER"
use_config_var "DB_BACKUPS_REMOTE_HOST"
use_config_var "DB_BACKUPS_REMOTE_DIR"
use_config_var "DB_BACKUPS_EXCLUDED_DBS"
use_config_var "MAILTO"

DB_BACKUPS_LAST="$DB_BACKUPS_ROOT/last"
DB_BACKUPS_EXCLUDED_DBS="$DB_BACKUPS_EXCLUDED_DBS information_schema performance_schema"

IS_BACKUP=""
IS_SEND=""
IS_CLEAN=""

if [ "$1" = "backup" ]; then IS_BACKUP=1
elif [ "$1" = "send" ]; then IS_SEND=1
elif [ "$1" = "clean" ]; then IS_CLEAN=1
else
	usage
	exit 1
fi

temp_file=$(mktemp -t mysql-backup-XXXX)
trap 'rm -f "$temp_file"' EXIT

is_excluded_db() {
	db="$1"
	for excluded_db in $(echo "$DB_BACKUPS_EXCLUDED_DBS"); do
		if [ $(echo "$db" | grep -cE "$excluded_db") = 1 ]; then
			echo 1
			return 0
		fi
	done
	echo 0
	return 1
}

get_dbs() {
	dbs_all=$(mysql -Brs -e "SHOW DATABASES") # | head -n 2)
	for db in $(echo "$dbs_all"); do
		if [ $(is_excluded_db "$db") = "1" ]; then
			continue
		fi
		echo "$db"
	done
}

dump_dbs() {
	error=0
	dbs="$1"

	for db in $(echo "$dbs"); do
		is_test && echo dbdump "$db"
		dump_file=$(dbdump "$db")
		if [ ! -f "$dump_file" ]; then
			echo >&2 "$dump_file not exist"
			error=1
		else
			echo "$db;$dump_file" >> "$temp_file"
		fi
	done

	return "$error"
}

send_dbs() {
	remote_user_host="${DB_BACKUPS_REMOTE_USER}@${DB_BACKUPS_REMOTE_HOST}"
	ssh "$remote_user_host" mkdir -p "$DB_BACKUPS_REMOTE_DIR"

	dbs="$1"
	for db in $(echo "$dbs"); do
		last_link="$DB_BACKUPS_LAST/$db.gz"
		#echo "$last_link"
		if [ -h "$last_link" ]; then
			dump_file=$(readlink "$last_link")
			remote_path="${remote_user_host}:${DB_BACKUPS_REMOTE_DIR}/${db}_${dump_file##*/}"
			if [ -n "$TERM" ]; then
				echo rsync "$dump_file" "$remote_path"
			fi
			rsync "$dump_file" "$remote_path"
		fi
	done
}

clean_backups() {
	dbs="$1"
	for db in $(echo "$dbs"); do
		dir="$DB_BACKUPS_ROOT/$(date --date="-2 day" '+%Y/%m/%d')"
		if [ -d "$dir" ]; then
			find "$dir" -name "*.gz" | sort | sed "1 d" | xargs --no-run-if-empty rm
		fi
	done
}

main() {
	error=0

	dbs=$(get_dbs)
	if [ -n "$IS_BACKUP" ]; then
		#echo dump_dbs
		dump_dbs "$dbs"

		log_string="$(hostname -f) mysql backup $(wc -l "$temp_file") databases"
		echo "$(date '+%Y-%m-%d %H:%i:%s') $log_string" >> "$DB_BACKUPS_LOG"

		if [ $# -ne 0 ]; then
			echo >&2 "error while dump dbs"
		fi
	fi

	if [ -n "$IS_SEND" ]; then
		#echo send_dbs
		send_dbs "$dbs"
	fi

	if [ -n "$IS_CLEAN" ]; then
		#echo clean_backups
		clean_backups "$dbs"
	fi

	return "$error"
}

main
